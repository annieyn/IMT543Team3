CREATE DATABASE jmah_Projects

use jmah_Projects
-- 11 tables without FKS
CREATE TABLE tblGENDER
(GenderID INTEGER IDENTITY(1,1) primary key,
Gender VARCHAR (10)NOT NULL)

CREATE TABLE tblDEPARTMENT
(DepartmentID INTEGER IDENTITY(1,1) primary key, 
DepartmentName VARCHAR (50) NOT NULL,
DepartmentDescr VARCHAR (255) NULL)

CREATE TABLE tblPOSITION_TYPE(
PositionTypeID INTEGER IDENTITY(1,1) primary key,
PositionTypeName VARCHAR (30) NOT NULL,
PositionTypeDescr VARCHAR(255)NULL)

CREATE TABLE tblLOCATION
(LocationID INTEGER IDENTITY(1,1) primary key,
LocationName VARCHAR (50) NOT NULL,
LocationDescr VARCHAR (255) NULL)

CREATE TABLE tblCUSTOMER
(CustomerID INTEGER IDENTITY(1,1) primary key,
CustomerFName Varchar(20) NOT NULL,
CustomerLName Varchar(20) NOT NULL,
CustomerEmail Varchar(40) NOT NULL,
CustomerDoB Date NOT NULL)

CREATE TABLE tblPRODUCT_CATEGORY
(ProductCategoryID INTEGER IDENTITY(1,1) primary key,
ProductCategoryName Varchar(30) NOT NULL,
ProductCategoryDescr Varchar(255) NULL)

CREATE TABLE tblCOLOR
(ColorID INTEGER IDENTITY (1,1) primary key,
ColorName varchar(20) NOT NULL)

CREATE TABLE tblSIZE
(SizeID INTEGER IDENTITY (1,1) primary key,
SizeName varchar(20) NOT NULL,
SizeDescr varchar (255) NULL)

CREATE TABLE tblSUPPLIER
(SupplierID INTEGER IDENTITY (1,1) primary key,
CompanyName VARCHAR(40) NOT NULL,
SupplierCity VARCHAR(50) NOT NULL,
SupplierState VARCHAR(50) NOT NULL,
SupplierZipCode VARCHAR(10) NOT NULL)
 
CREATE TABLE tblPHONE_TYPE
(PhoneTypeID INTEGER IDENTITY (1,1) primary key,
PhoneName VARCHAR(20) NOT NULL,
PhoneDescr VARCHAR(255) NULL)
 
CREATE TABLE tblROLE
(RoleID INTEGER IDENTITY (1,1) primary key,
RoleName VARCHAR(40) NOT NULL,
RoleDescr VARCHAR(255) NULL)

------16 transactinoal tables
CREATE TABLE tblEMPLOYEE(
EmployeeID INTEGER IDENTITY(1,1) primary key,
EmployeeFName VARCHAR(20) NOT NULL,
EmployeeLName VARCHAR(20) NOT NULL,
EmployeeCity VARCHAR(50) NOT NULL,
EmployeeState VARCHAR(50) NOT NULL,
EmployeeZipCode VARCHAR(10) NOT NULL,
DateOfBirth Date NOT NULL,
HiredDate Date NOT NULL,
GenderID INTEGER FOREIGN KEY REFERENCES tblGENDER(GenderID) NOT NULL)

CREATE TABLE tblBRANCHES(
BranchID INTEGER IDENTITY(1,1) primary key,
BranchCity VARCHAR(50) NOT NULL,
BranchState VARCHAR(50) NOT NULL,
BranchZipCode INT NOT NULL,
LocationID INTEGER FOREIGN KEY REFERENCES tblLOCATION(LocationID) NOT NULL)

CREATE TABLE tblPOSITION(
PositionID INTEGER IDENTITY(1,1) primary key,
PositionName VARCHAR (30) NOT NULL,
PositionDescr VARCHAR(255) NULL,
PositionTypeID INT FOREIGN KEY REFERENCES tblPOSITION_TYPE(PositionTypeID) NOT NULL)

CREATE TABLE tblJOB(
JobID INTEGER IDENTITY(1,1) primary key,
BeginDate DATE NOT NULL,
EndDate DATE NULL,
Salaries NUMERIC (9, 2) NOT NULL,
EmployeeID INT FOREIGN KEY REFERENCES tblEMPLOYEE(EmployeeID) NOT NULL,
PositionID INT FOREIGN KEY REFERENCES tblPOSITION(PositionID) NOT NULL,
BranchID INT FOREIGN KEY REFERENCES tblBRANCHES(BranchID) NOT NULL,
DepartmentID INT FOREIGN KEY REFERENCES tblDEPARTMENT(DepartmentID) NOT NULL)

CREATE TABLE tblPRODUCT
(ProductID INTEGER IDENTITY(1,1) primary key,
ProductCategoryID INTEGER FOREIGN KEY REFERENCES tblPRODUCT_CATEGORY (ProductCategoryID) NOT NULL,
UnitPrice Numeric(5,2) NOT NULL,
SKU Varchar(20) NOT NULL,
ProductName Varchar(20) NOT NULL)

CREATE TABLE tblCUSTOMER_PHONE
(CustomerPhoneID INTEGER IDENTITY(1,1) primary key,
CustomerID INTEGER FOREIGN KEY REFERENCES tblCUSTOMER (CustomerID) NOT NULL,
AreaCode INT NOT NULL,
PhoneNumber VARCHAR(22) Not Null)

CREATE TABLE tblORDER
(OrderID INTEGER IDENTITY(1,1) primary key,
CustomerID INTEGER FOREIGN KEY REFERENCES tblCUSTOMER (CustomerID) NOT NULL,
OrderDate DATE NOT NULL)

CREATE TABLE tblORDER_PRODUCT
(OrderProductID INTEGER IDENTITY(1,1) primary key,
ProductID INTEGER FOREIGN KEY REFERENCES tblPRODUCT (ProductID) NOT NULL,
OrderID INTEGER FOREIGN KEY REFERENCES tblORDER (OrderID) NOT NULL,
Quantity INT NOT NULL)

CREATE TABLE tblPRODUCT_COLOR
(ColorProductID INTEGER IDENTITY(1,1) primary key,
ColorID INTEGER FOREIGN KEY REFERENCES tblCOLOR (ColorID) NOT NULL,
ProductID INTEGER FOREIGN KEY REFERENCES tblPRODUCT (ProductID) NOT NULL)

CREATE TABLE tblPRODUCT_SIZE
(SizeProductID INTEGER IDENTITY(1,1) primary key,
SizeID INTEGER FOREIGN KEY REFERENCES tblSIZE (SizeID) NOT NULL,
ProductID INTEGER FOREIGN KEY REFERENCES tblPRODUCT (ProductID) NOT NULL)

CREATE TABLE tblPURCHASE_ORDER
(PurchaseOrderID INTEGER IDENTITY(1,1) primary key,
SupplierID INTEGER FOREIGN KEY REFERENCES tblSUPPLIER (SupplierID) NOT NULL,
PurchaseDate DATE NOT NULL,
TotalAmount Numeric(9,2) NOT NULL)

CREATE TABLE tblPURCHASE_ORDER_PRODUCT
(PurchaseOrderProductID INTEGER IDENTITY(1,1) primary key,
PurchaseOrderID INTEGER FOREIGN KEY REFERENCES tblPURCHASE_ORDER (PurchaseOrderID) NOT NULL,
ProductID INTEGER FOREIGN KEY REFERENCES tblPRODUCT (ProductID) NOT NULL,
OrderQuantity INT NOT NULL,
PriceExtd NUMERIC (9,2) not NULL)

CREATE TABLE tblCONTACT
(ContactID INTEGER IDENTITY (1,1) primary key,
RoleID INTEGER FOREIGN KEY REFERENCES tblROLE (RoleID) NOT NULL,
SupplierID INTEGER FOREIGN KEY REFERENCES tblSUPPLIER (SupplierID) NOT NULL,
ContactFName VARCHAR(20) NOT NULL,
ContactLName VARCHAR(20) NOT NULL,
ContactEmail VARCHAR(50) NOT NULL)

CREATE TABLE tblSUPPLIER_PHONE
(PhoneID INTEGER IDENTITY (1,1) primary key,
PhoneTypeID INTEGER FOREIGN KEY REFERENCES tblPHONE_TYPE (PhoneTypeID) NOT NULL,
ContactID INTEGER FOREIGN KEY REFERENCES tblCONTACT (ContactID) NOT NULL,
PhoneName VARCHAR(50) NOT NULL,
AreaCode INT NOT NULL,
PhoneNumber VARCHAR(22) Not Null,
PhoneDescr VARCHAR(255) NULL)

CREATE TABLE tblSUPPLIER_CART
(SupplierCartID INTEGER IDENTITY(1,1) primary key,
SupplierID INTEGER FOREIGN KEY REFERENCES tblSUPPLIER (SupplierID) NOT NULL,
ProductID INTEGER FOREIGN KEY REFERENCES tblPRODUCT (ProductID) NOT NULL,
Quantity INT NOT NULL,
CartDate DATE NOT NULL)

CREATE TABLE tblCUSTOMER_CART
(CustomerCartID INTEGER IDENTITY(1,1) primary key,
CustomerID INTEGER FOREIGN KEY REFERENCES tblCUSTOMER (CustomerID) NOT NULL,
ProductID INTEGER FOREIGN KEY REFERENCES tblPRODUCT (ProductID) NOT NULL,
Quantity INT NOT NULL,
CartDate DATE NOT NULL)
------------Codes above are GOOD

-------------------NOW INSERT INTO LOOK UP TABLES

----Jocelyn
INSERT INTO tblCOLOR (ColorName)
VALUES('Red'), ('Orange'), ('Yellow'), ('Green'), ('Blue'), ('Purple'), ('White'), ('Black'), ('Pink'), ('Brown'), ('Gray')

INSERT INTO tblSIZE (SizeName, SizeDescr)
VALUES ('XS', 'Extra Small'), ('S', 'Small'), ('M', 'Medium'), ('L', 'Large'), ('XL', 'Extra Large'), ('2XL', 'Double Large or Extra, Extra Large'), ('3XL', 'Triple Large')

----ANNIE
INSERT INTO tblSUPPLIER (CompanyName, SupplierCity, SupplierState, SupplierZipCode)
VALUES('Ringo Fabric', 'Seattle', 'Washington, WA', '98108'), 
('Sally B', 'Los Angeles', 'California, CA', '90026'), 
('L&L', 'Houston', 'Texas, TX', '77002'), 
('P&G', 'Orlando', 'Florida, FL', '32803'),
('C&C', 'New York City', 'New York, NY', '10001')

INSERT INTO tblPHONE_TYPE (PhoneName, PhoneDescr)
VALUES ('Office', 'main phone line'), 
('Work','most convenient'), 
('Home', 'will return next day'), 
('Fax', 'convenient'), 
('Mobile', 'also conveient')

INSERT INTO tblROLE (RoleName, RoleDescr)
VALUES ('Manager', 'mangage overall operations'),
('Marketing Staff', 'connect with customers'),
('CS Representative', 'answer questions for customers'),
('Manufacturer', 'produce goods for customers'),
('Director', 'oversee the entire business operations')

----KARI
INSERT INTO tblCUSTOMER (CustomerFName, CustomerLName, CustomerEmail, CustomerDoB)
VALUES ('Haile','barajas','hailebarajas01@gmail.com','11/01/1991'),
('Cara','Priest','carapriest02@gmail.com','03/06/1983'),
('Charie','Maes','chariemaes03@gmail.com','03/12/1979'),
('March','Robb','marchrobb04@gmail.com','12/08/1977'),
('Ama','Hanlon','amahanlon05@gmail.com','10/05/1990'),
('Rachel', 'Li', 'Rachel@gmail.com', '05/01/1992'),
('Sam', 'Lam', 'samlam@gmail.com', '05/01/1998'),
('Sara', 'Su', 'Sara@gmail.com', '07/01/1997'),
('Susan', 'Su', 'Susan@gmail.com', '07/01/1977'),
('Lisa', 'Wong', 'Lisaa@gmail.com', '07/01/1957')

INSERT INTO tblPRODUCT_CATEGORY (ProductCategoryName, ProductCategoryDescr)
VALUES ('Apparel','Clothing for women, men and children'),
('Sportswear','Clothing for physical activites'),
('Formal Wear','Evening cloth'),
('Accessories','Items that contribute to clothing'),
('Jewelry','A category of accessory')

----ROGER
INSERT INTO tblGENDER(GENDER)
VALUES ('Male'),('Female'),('Others')
â€‹
INSERT INTO tblDEPARTMENT(DepartmentName, DepartmentDescr)
VALUES('Marketing','Promote company to the market'),
('Sales','Supervisors and Sales Managers'),
('IT','Internal Technology Support Department'),
('Finance','Manage company financial informtation'),
('Product','Manage product design'),('Warehouse','Manage company stocks'),
('Management','Manage company operations')

INSERT INTO tblPOSITION_TYPE(PositionTypeName,PositionTypeDescr)
VALUES('Full time','The employee works 40 hours or more per week.'),
('Part time ','The employee works less than 40 hours per week.'),
('Elected','The employee fills an elected position.'),
('Season','The employee is employed to work a seasonal position.'),
('Volunteer','The employee fills an unpaid position.'),
('Appointed','The employee is appointed to the position.'),
('Temporary','The employee fills a temporary position.')

INSERT INTO tblLOCATION(LocationName,LocationDescr)
VALUES('Downtown Manhattan','NYC Flagship Store'),
('Downtown Bellevue','Fancy store in BellevueSquare'),
('Downtown Seattle','Wahsington Flagship Store'),
('Downtown San Francisco','California Flagship Store'),
('Downtown Portland','Oregon Flagship Store')

--------All the codes above run smoothly, data inserted already
--------------------------------------------------------------------------------------------------------------------------------
--------------------Now this is the Stored Procedure section---------------------------------------------------------------------

--------------------Kari----------------
--- SP for insert into tblCUSTOMER_PHONE (Kari)
Create PROCEDURE jakrInsertCustomerPhone
@ACode  INT,
@PNumber varchar(22),
@CFName varchar (20),
@CLName varchar (20)
AS
DECLARE @C_ID INT

SET @C_ID = (SELECT CustomerID FROM tblCUSTOMER WHERE CustomerFName = @CFName AND CustomerLName = @CLName)

BEGIN TRAN G1
INSERT INTO tblCUSTOMER_PHONE (AreaCode, PhoneNumber, CustomerID)
VALUES (@ACode, @PNumber, @C_ID)

COMMIT TRAN G1
GO

--executed successfully
EXEC jakrInsertCustomerPhone
@ACode = 503,
@PNumber = '5032641141',
@CFName = 'Haile',
@CLName = 'Barajas'

EXEC jakrInsertCustomerPhone
@ACode = 458,
@PNumber = '4582006291',
@CFName = 'Cara',
@CLName = 'Priest'

EXEC jakrInsertCustomerPhone
@ACode = 1,
@PNumber = '2063006286',
@CFName = 'Charie',
@CLName = 'Maes'

EXEC jakrInsertCustomerPhone
@ACode = 1,
@PNumber = '2066236227',
@CFName = 'Ama',
@CLName = 'Hanlon'

-----SP FOR INSERT tblPRODUCT (Kari)
CREATE PROCEDURE jakrInsertProduct-- DONE
@UPrice NUMERIC (5,2), -- max (99999. 99)
@SKU Varchar (20),
@PName Varchar (20),
@PCategoryName Varchar (30)
AS
DECLARE @PC_ID INT

SET @PC_ID = (SELECT ProductCategoryID FROM tblPRODUCT_CATEGORY WHERE ProductCategoryName = @PCategoryName)

BEGIN TRAN G1
INSERT INTO tblPRODUCT (UnitPrice, SKU, ProductName, ProductCategoryID)
VALUES (@UPrice, @SKU, @PName, @PC_ID)

COMMIT TRAN G1
GO

EXEC jakrInsertProduct-- executed successfully
@UPrice = 50.45,
@SKU = '84625694',
@PName = 'Print Faux Fur Coat',
@PCategoryName = 'Apparel'

EXEC jakrInsertProduct
@UPrice = 89.89,
@SKU = '84614874',
@PName = 'Acorn Sportswear',
@PCategoryName = 'Sportswear'

EXEC jakrInsertProduct
@UPrice = 19.99,
@SKU = '84614834',
@PName = 'Pineapple Earrings',
@PCategoryName = 'Jewelry'

EXEC jakrInsertProduct
@UPrice = 9.99,
@SKU = '84614888',
@PName = 'Fake Diamond Ring',
@PCategoryName = 'Jewelry'

EXEC jakrInsertProduct
@UPrice = 399.99,
@SKU = '84614886',
@PName = 'Black Tuxedo Jacket',
@PCategoryName = 'Formal Wear'

EXEC jakrInsertProduct
@UPrice = 49.99,
@SKU = '84614836',
@PName = 'Rain Jacket',
@PCategoryName = 'Apparel'

EXEC jakrInsertProduct
@UPrice = 79.99,
@SKU = '84614843',
@PName = 'Ski Jacket',
@PCategoryName = 'Apparel'

------------------Roger's Stored Procedures ------------------------
----Insert tblEmployee (Roger)
CREATE PROCEDURE jakrINSERTEMPLOYEE
@Gender varchar (20),
@EFN VARCHAR (20),
@ELN VARCHAR (20),
@EC VARCHAR (50),
@ES VARCHAR (50),
@EZP INT,
@DOB DATE,
@HD DATE
AS
DECLARE @Gen_ID INT
â€‹
SET @Gen_ID = (SELECT GenderID from tblGENDER WHERE Gender = @Gender)
â€‹
BEGIN TRAN G1
INSERT INTO tblEmployee (GenderID, EmployeeFName, EmployeeLName, EmployeeCity, EmployeeState, EmployeeZipCode, DateOfBirth, HiredDate)
VALUES (@Gen_ID,@EFN,@ELN,@EC,@ES,@EZP,@DOB,@HD)

COMMIT TRAN G1

EXEC jakrINSERTEMPLOYEE--executed successfully
@Gender = Male,
@EFN = 'John',
@ELN = 'Smith',
@EC = 'Bellevue',
@ES = 'Washington, WA',
@EZP = 98004,
@DOB = '03/21/1995',
@HD = '12/01/2020'

EXEC jakrINSERTEMPLOYEE--executed successfully
@Gender = Female,
@EFN = 'Abbie',
@ELN = 'Smith',
@EC = 'Bellevue',
@ES = 'Washington, WA',
@EZP = 98004,
@DOB = '09/01/1996',
@HD = '12/01/2020'

EXEC jakrINSERTEMPLOYEE--executed successfully
@Gender = Female,
@EFN = 'Joyce',
@ELN = 'Young',
@EC = 'Bellevue',
@ES = 'Washington, WA',
@EZP = 98004,
@DOB = '09/01/1975',
@HD = '02/01/2015'

EXEC jakrINSERTEMPLOYEE--executed successfully
@Gender = Male,
@EFN = 'Peter',
@ELN = 'Lam',
@EC = 'Seattle',
@ES = 'Washington, WA',
@EZP = 98101,
@DOB = '05/21/1985',
@HD = '05/01/2020'

EXEC jakrINSERTEMPLOYEE--executed successfully
@Gender = Female,
@EFN = 'Kelly',
@ELN = 'Johnson',
@EC = 'Seattle',
@ES = 'Washington, WA',
@EZP = 98101,
@DOB = '07/21/1987',
@HD = '05/01/2019'

----Insert tblBranches (Roger)
CREATE PROCEDURE jakrInsertBranches
@LocName VARCHAR(20),
@BranCity VARCHAR(50),
@BranState VARCHAR(50),
@BranZC INT
AS
DECLARE @Loc_ID INT
â€‹
SET @Loc_ID = (SELECT LOCATIONID FROM tblLOCATION WHERE LocationName = @LocName)
â€‹
BEGIN TRAN G1
INSERT INTO tblBRANCHES(LocationID, BranchCity, BranchState, BranchZipCode)
VALUES(@Loc_ID, @BranCity, @BranState, @BranZC)
â€‹
Commit TRAN G1
â€‹
exec jakrInsertBranches-- DONE
@LocName = 'Downtown Bellevue',
@BranCity = 'Bellevue',
@BranState = 'Washington, WA',
@BranZC =98004


exec jakrInsertBranches-- DONE
@LocName = 'Downtown Seattle',
@BranCity = 'Seattle',
@BranState = 'Washington, WA',
@BranZC =98101

exec jakrInsertBranches-- DONE
@LocName = 'Downtown Manhattan ',
@BranCity = 'New York',
@BranState = 'New York, NY',
@BranZC =10002

exec jakrInsertBranches-- DONE
@LocName = 'Downtown Portland',
@BranCity = 'Portland',
@BranState = 'Oregon, OR',
@BranZC =97205


--Insert tblJob (Roger)
CREATE PROCEDURE jakrInsertJob
@EFN VARCHAR(20),
@ELN VARCHAR (20),
@PN VARCHAR(30),
@BranCity VARCHAR(20),
@DepName VARCHAR(50),
@BeginDate Date,
@EndDate Date,
@Salaries NUMERIC(9,2)
AS
DECLARE @EMP_ID INT, @P_ID INT, @Bran_ID INT, @DEP_ID INT
â€‹
SET @EMP_ID = (SELECT EMPLOYEEID FROM tblEMPLOYEE WHERE EmployeeFName = @EFN AND EmployeeLName = @ELN)
SET @P_ID = (SELECT POSITIONID FROM tblPOSITION WHERE PositionName = @PN)
SET @Bran_ID = (SELECT BRANCHID FROM tblBRANCHES WHERE BranchCity = @BranCity)
SET @DEP_ID = (SELECT DEPARTMENTID FROM tblDEPARTMENT WHERE DepartmentName = @DepName)
â€‹
BEGIN TRAN G1
INSERT INTO tblJOB(EMPLOYEEID,PositionID,BranchID,DepartmentID,BeginDate,EndDate,Salaries)
VALUES(@EMP_ID,@P_ID,@Bran_ID,@DEP_ID,@BeginDate,@EndDate,@Salaries)
â€‹
COMMIT TRAN G1
â€‹
---------------------------
EXEC jakrInsertJob
@EFN = 'John',
@ELN= 'Smith',
@PN = 'Regional Manager',
@BranCity = 'Bellevue',
@DepName = 'Management',
@BeginDate = '2020-12-01',
@EndDate = '',
@Salaries = 799999.75

EXEC jakrInsertJob
@EFN = 'Peter',
@ELN= 'Lam',
@PN = 'Sales Representative',
@BranCity = 'Seattle',
@DepName = 'Sales',
@BeginDate = '2020-05-01',
@EndDate = '',
@Salaries = 50999.75


EXEC jakrInsertJob
@EFN = 'Joyce',
@ELN= 'Young',
@PN = 'Marketing Director',
@BranCity = 'Bellevue',
@DepName = 'Marketing',
@BeginDate = '2015-02-01',
@EndDate = '',
@Salaries = 250999.75

----------------ANNIE
--SP for tblCONTACT (Annie)
CREATE PROCEDURE jakrInsertCONTACT--DONE
@CFName varchar (20),
@CLName varchar (20),
@CEmail varchar (50),
@CompName varchar(40),
@RName varchar (40)
AS

DECLARE @S_ID INT, @R_ID INT

SET @S_ID = (SELECT SupplierID from tblSUPPLIER WHERE CompanyName = @CompName)
SET @R_ID = (SELECT RoleID from tblROLE WHERE RoleName = @RName)

BEGIN TRAN G1
INSERT INTO tblCONTACT (RoleID, SupplierID, ContactFName, ContactLName, ContactEmail)
VALUES (@R_ID,@S_ID, @CFName, @CLName, @CEmail)

COMMIT TRAN G1


EXEC jakrInsertCONTACT-- inserted
@CFName = 'Jamie',
@CLName = 'Lawson',
@CEmail = 'jamiel2@gmail.com',
@CompName = 'L&L',
@RName = 'Manager'


-----SP for tblSUPPLIER_PHONE (Annie)
CREATE PROCEDURE jakrInsertSUPPLIER_PHONE-- done
@PName varchar (20),
@AreaC INT,
@PNum VARCHAR(22),
@PDesc varchar (255),
@Ph_Name varchar (20),
@CFName varchar (20),
@CLName varchar (20)
AS
DECLARE @PT_ID INT, @Contact_ID INT

SET @PT_ID = (SELECT PhoneTypeID from tblPHONE_TYPE WHERE PhoneName = @Ph_Name)
SET @Contact_ID = (SELECT ContactID from tblCONTACT WHERE ContactFName = @CFName AND ContactLName = @CLName)

BEGIN TRAN G1
INSERT INTO tblSUPPLIER_PHONE (PhoneTypeID, ContactID, PhoneName, AreaCode, PhoneNumber, PhoneDescr)
VALUES (@PT_ID, @Contact_ID, @PName, @AreaC, @PNum, @PDesc)
COMMIT TRAN G1

EXEC jakrINSERTSUPPLIER_PHONE-- done
@PName = 'Office',
@AreaC = 1,
@PNum = '206-456-7452',
@PDesc = 'main contact',
@Ph_Name = 'office',
@CFName = 'Jamie',
@CLName = 'Lawson'


------Jocelyn
---Stored Procedure for tblPRODUCT_Size  (Jocelyn)
CREATE PROCEDURE jakrInsertProductSize-- Done
@P_Name varchar (20),
@S_Name VARCHAR (20)
AS 
DECLARE @P_ID INT, @S_ID INT

SET @P_ID = (SELECT ProductID from tblPRODUCT WHERE ProductName = @P_Name)
SET @S_ID = (SELECT SizeID from tblSIZE WHERE SizeName = @S_Name)

BEGIN TRAN G1
INSERT INTO tblPRODUCT_Size (ProductID, SizeID)
VALUES (@P_ID, @S_ID)

COMMIT TRAN G1

exec jakrInsertProductSize-- Done
@P_Name = 'Black Tuxedo Jacket' ,
@S_Name = 'S'

exec jakrInsertProductSize-- Done
@P_Name = 'Black Tuxedo Jacket' ,
@S_Name = 'M'

exec jakrInsertProductSize-- Done
@P_Name = 'Black Tuxedo Jacket' ,
@S_Name = 'L'

exec jakrInsertProductSize-- Done
@P_Name = 'Black Tuxedo Jacket' ,
@S_Name = 'XL'

exec jakrInsertProductSize-- Done
@P_Name = 'Acorn Sportswear' ,
@S_Name = 'XS'

exec jakrInsertProductSize-- Done
@P_Name = 'Acorn Sportswear' ,
@S_Name = 'S'

exec jakrInsertProductSize-- Done
@P_Name = 'Acorn Sportswear' ,
@S_Name = 'M'

exec jakrInsertProductSize-- Done
@P_Name = 'Acorn Sportswear' ,
@S_Name = 'L'


---Stored Procedure for tblPRODUCT_COLOR  (Jocelyn)
CREATE PROCEDURE jakrInsertProductColor-- Done
@ProName varchar (20),
@ColName VARCHAR (20)
AS DECLARE @ProID INT, @ColID INT

SET @ProID = (SELECT ProductID from tblPRODUCT WHERE ProductName = @ProName)
SET @ColID = (SELECT ColorID from tblCOLOR WHERE ColorName = @ColName)

BEGIN TRAN G1
INSERT INTO tblPRODUCT_COLOR (ProductID, ColorID)
VALUES (@ProID, @ColID)

COMMIT TRAN G1


exec jakrInsertProductColor-- Done
@ProName = 'Acorn Sportswear',
@ColName = 'White'

exec jakrInsertProductColor-- Done
@ProName = 'Acorn Sportswear',
@ColName = 'Red'

exec jakrInsertProductColor-- Done
@ProName = 'Acorn Sportswear',
@ColName = 'Black'

exec jakrInsertProductColor-- Done
@ProName = 'Acorn Sportswear',
@ColName = 'Yellow'

-------- SP for tblPOSITION (Jocelyn)
CREATE PROCEDURE jakrInsertPosition-- done
@Pos_Name VARCHAR(30),
@P_Desc VARCHAR(255),
@PT_Name VARCHAR (30)
AS
DECLARE @PosType_ID INT

SET @PosType_ID = (select PositionTypeID from tblPOSITION_TYPE WHERE PositionTypeName = @PT_Name)

BEGIN TRAN G1
INSERT INTO tblPOSITION(PositionName, PositionDescr, PositionTypeID)
VALUES(@Pos_Name, @P_Desc, @PosType_ID)
â€‹
Commit TRAN G1


Exec jakrInsertPosition
@Pos_Name = 'Regional Manager',
@P_Desc = 'Manager manages the Western region',
@PT_Name = 'Full Time'

Exec jakrInsertPosition
@Pos_Name = 'Security Guard',
@P_Desc = 'Keep our stores safe',
@PT_Name = 'Full Time'

Exec jakrInsertPosition
@Pos_Name = 'Sales representative',
@P_Desc = 'Sell our products to customers',
@PT_Name = 'Full Time'


Exec jakrInsertPosition
@Pos_Name = 'Fashion Designer Lead',
@P_Desc = 'Manage and design new products',
@PT_Name = 'Full Time'

Exec jakrInsertPosition
@Pos_Name = 'Summer Intern',
@P_Desc = 'Intern only can work during summer',
@PT_Name = 'Season'

Exec jakrInsertPosition
@Pos_Name = 'Marketing Director',
@P_Desc = 'Market our product',
@PT_Name = 'Full Time'

-- SP to get Customer ID (Jocelyn)
Create PROCEDURE jakrGetCustomerID  
 @Fname varchar(20),  
 @Lname varchar(20),  
 @CustID INT OUT  
AS  
BEGIN  
SET @CustID = ( SELECT  Top 1 CustomerID FROM tblCUSTOMER   
                WHERE CustomerFname = @Fname  
                AND CustomerLname = @Lname)
END  

--SP to populate tblCustomer_Cart (Jocelyn)
GO
Create PROCEDURE jakrInsertCustCart --Done
       @ProdName varchar(20),  
        @Date DateTime,  
        @CFname varchar(20),  
        @CLname varchar(20),  
       @Qty INT  
AS  
BEGIN  
DECLARE @ProdID INT, @CustomerID INT 

SET @ProdID = (SELECT ProductID FROM tblPRODUCT WHERE ProductName = @ProdName)  

EXEC jakrGetCustomerID
 @Fname = @CFname,
 @Lname = @CLname,  
 @CustID = @CustomerID OUT

IF @CustomerID IS NULL
    BEGIN
        PRINT 'Some kind of problem going on with @CustomerID...Please check spelling';
        THROW 56341, '@CustomerID cannot be NULL', 1;
    END

END  

       INSERT INTO tblCUSTOMER_CART  (CustomerID, ProductID, Quantity, CartDate)  
       VALUES (@CustomerID, @ProdID, @Qty, @Date)  

EXEC jakrInsertCustCart
@ProdName = 'Rain jacket',  
@Date = '2021-03-08',
@Qty = 1,
@CFname = 'Haile',  
@CLname = 'barajas'  

EXEC jakrInsertCustCart
@ProdName = 'Ski Jacket',  
@Date = '2021-03-08',
@Qty = 10,
@CFname = 'Haile',  
@CLname = 'barajas'  

EXEC jakrInsertCustCart
@ProdName = 'Ski Jacket',  
@Date = '2021-03-08',
@Qty = 1,
@CFname = 'Sara',  
@CLname = 'Su'  

EXEC jakrInsertCustCart
@ProdName = 'Pineapple earrings',  
@Date = '2021-03-08',
@Qty = 5,
@CFname = 'Sara',  
@CLname = 'Su' 

EXEC jakrInsertCustCart
@ProdName = 'Rain Jacket',  
@Date = '2021-03-08',
@Qty = 3,
@CFname = 'Sara',  
@CLname = 'Su' 


EXEC jakrInsertCustCart
@ProdName = 'Pineapple earrings',  
@Date = '2021-03-08',
@Qty = 1,
@CFname = 'Sam',  
@CLname = 'Lam' 

EXEC jakrInsertCustCart
@ProdName = 'Ski Jacket',  
@Date = '2021-03-08',
@Qty = 3,
@CFname = 'Sam',  
@CLname = 'Lam'  

EXEC jakrInsertCustCart
@ProdName = 'Rain Jacket',  
@Date = '2021-03-08',
@Qty = 3,
@CFname = 'Sam',  
@CLname = 'Lam'  

EXEC jakrInsertCustCart
@ProdName = 'Rain Jacket',  
@Date = '2021-03-07',
@Qty = 2,
@CFname = 'Lisa',  
@CLname = 'Wong'  

EXEC jakrInsertCustCart
@ProdName = 'Ski Jacket',  
@Date = '2021-03-07',
@Qty = 1,
@CFname = 'Lisa',  
@CLname = 'Wong'  


EXEC jakrInsertCustCart
@ProdName = 'Ski Jacket',  
@Date = '2021-03-07',
@Qty = 1,
@CFname = 'Cara',  
@CLname = 'Priest' 

EXEC jakrInsertCustCart
@ProdName = 'Acorn Sportswear',  
@Date = '2021-03-08',
@Qty = 5,
@CFname = 'Cara',  
@CLname = 'Priest'  

EXEC jakrInsertCustCart
@ProdName = 'Ski Jacket',  
@Date = '2021-03-07',
@Qty = 20,
@CFname = 'March',  
@CLname = 'Robb' 

EXEC jakrInsertCustCart
@ProdName = 'Acorn Sportswear',  
@Date = '2021-03-08',
@Qty = 7,
@CFname = 'March',  
@CLname = 'Robb' 
----------------------------------------------
--SP to populate tblOrder, tblOrder_Product (Jocelyn)
GO
CREATE PROCEDURE jakrProcessCustCart
@CustFName varchar (20),
@CustLName varchar (20) 
AS  
BEGIN  
DECLARE @OrderID INT, @Customer_ID INT  
  
BEGIN TRANSACTION G1  
PRINT 'Beginning TRAN G1; @@TRANCOUNT should equal 1'  
PRINT @@TRANCOUNT  
  
BEGIN TRANSACTION G2  
PRINT 'Beginning TRAN G2; @@TRANCOUNT should equal 2'  
PRINT @@TRANCOUNT  
  
EXEC jakrGetCustomerID  
 @Fname = @CustFName,  
 @Lname = @CustLName,  
 @CustID =  @Customer_ID OUT  

INSERT INTO tblORDER ([CustomerID],[OrderDate])  
VALUES (@Customer_ID, GetDate())  
  
SET @OrderID = (SELECT Scope_Identity())  
  
IF @OrderID IS NULL  
 BEGIN  
  PRINT 'Error in finding @orderID'  
  RAISERROR ('@OrderID is NULL; terminating process', 11, 1)  
  RETURN  
 END  
ELSE  

INSERT INTO tblORDER_PRODUCT (OrderID, ProductID, Quantity)  
SELECT @OrderID, ProductID, SUM(Quantity)  
FROM tblCUSTOMER_CART  
WHERE CustomerID = @Customer_ID  
GROUP BY ProductID  
  
  
IF @@ERROR <> 0  
       BEGIN  
             ROLLBACK TRANSACTION G2  
       END  
ELSE  
 BEGIN  
 PRINT 'COMMITTING TRAN G2; @@TRANCOUNT should be 2 still'  
PRINT @@TRANCOUNT  
  
        COMMIT TRANSACTION G2  
PRINT 'Just COMMITTED TRAN G2; @@TRANCOUNT should be 1 now'  
PRINT @@TRANCOUNT  
  
 END  
  
--DELETE rows from tblCART that have just been processed  
-- conduct a count to make sure number of rows processed is equal to the number of rows to be deleted  
  
  
BEGIN TRANSACTION G3  
PRINT 'Beginning TRAN G3 clean-up tblCART by deleting matching rows; @@TRANCOUNT should equal 2'  
PRINT @@TRANCOUNT  
  
PRINT @@Rowcount  
 DELETE   
 FROM tblCUSTOMER_CART  
 WHERE CustomerID = @Customer_ID
  
IF @@ERROR <> 0  
       BEGIN  
             ROLLBACK TRANSACTION G3  
       END  
ELSE  
 BEGIN  
 PRINT 'COMMITTING TRAN G3; @@TRANCOUNT should be 2 still'  
PRINT @@TRANCOUNT  
  
       COMMIT TRANSACTION G3  
PRINT 'Just COMMITTED TRAN G3; @@TRANCOUNT should be 1 now'  
PRINT @@TRANCOUNT  
  
 END  
  
  
  
IF @@ERROR <> 0  
       BEGIN  
             ROLLBACK TRANSACTION G3  
       END  
  
  
ELSE  
 BEGIN  
  PRINT 'COMMITTING TRAN G1; @@TRANCOUNT should be 1 and ready to close'  
PRINT @@TRANCOUNT  
IF @@TRANCOUNT <> 1  
 BEGIN  
             ROLLBACK TRANSACTION G1  
PRINT '@@TRANCOUNT <> 1; whole transaction is rolling back'  
       END  
ELSE  
       COMMIT TRANSACTION G1  
PRINT 'Just COMMITTED TRAN G1; @@TRANCOUNT should be 0 now'  
PRINT @@TRANCOUNT  
  
 END  
  
END  

exec jakrProcessCustCart
@CustFName = 'Sara',
@CustLName = 'Su'

exec jakrProcessCustCart
@CustFName = 'Sam',
@CustLName = 'Lam'


exec jakrProcessCustCart
@CustFName = 'Haile',
@CustLName = 'barajas'


exec jakrProcessCustCart
@CustFName = 'March',
@CustLName = 'Robb'


exec jakrProcessCustCart
@CustFName = 'Cara',
@CustLName = 'Priest'
