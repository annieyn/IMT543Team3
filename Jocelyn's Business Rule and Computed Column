----Jocelyn's Business Rule
--Customers who are younger than 18 cannot be eligible for buying our product: Black Tuxedo Jacket in 2021

GO
CREATE FUNCTION fn_NoCustomer18_tuxedo2021 ()
RETURNS INTEGER
AS 
BEGIN

DECLARE @RET INTEGER =0

    IF EXISTS (SELECT * FROM tblCUSTOMER C
    JOIN tblORDER O ON O.CustomerID = C.CustomerID
    JOIN tblORDER_PRODUCT OP ON O.OrderID = OP.OrderProductID
    JOIN tblPRODUCT P ON P.ProductID = OP.ProductID
    WHERE C.CustomerDoB < DATEADD(YEAR, -18, GETDATE()) 
    AND O.OrderDate BETWEEN '01/01/2021' AND '12/31/2021'
    AND P.ProductName = 'Black Tuxedo Jacket')
        SET @RET = 1

RETURN @RET
END

SELECT dbo.fn_NoCustomer18_tuxedo2021()

ALTER TABLE tblORDER WITH Nocheck
ADD CONSTRAINT CK_18YoungerNoTuxedo2021
CHECK (dbo.fn_NoCustomer18_tuxedo2021()=0)

----------Computed column
--A SQL Function to calculate the total amount of each order in tblOrder

--Function to calculate PriceExtd in tblORDER_PRODUCT
GO
CREATE FUNCTION fnCal_OrderProduct_PriceExtd (@OrderProductID INT)
RETURNS NUMERIC (12,2)
AS
BEGIN
DECLARE @RET NUMERIC (12,2) = 
            (SELECT P.UnitPrice*OP.Quantity from tblPRODUCT P
            JOIN tblORDER_PRODUCT OP ON P.ProductID = OP.ProductID
            WHERE OP.OrderProductID = @OrderProductID)

RETURN @RET
END

GO

ALTER TABLE tblORDER_product
add PriceExtd AS (dbo.fnCal_OrderProduct_PriceExtd(OrderProductID))

----FUNCTION to calculate TotalAmount in tblOrder
GO
CREATE FUNCTION fnCal_Order_TotalAmount (@OrderID INT)
RETURNS NUMERIC (12,2)
AS 
BEGIN
DECLARE @RET NUMERIC (12,2) = (SELECT SUM(PriceExtd) FROM tblORDER_PRODUCT WHERE OrderID = @OrderID)

RETURN @RET
END

ALTER TABLE tblORDER
add TotalAmount AS (dbo.fnCal_Order_TotalAmount(OrderID))
